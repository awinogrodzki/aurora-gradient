import { Uniform } from './Uniform.js';
import Material from './Material.js';
import Mesh from './Mesh.js';
import PlaneGeometry from './PlaneGeometry.js';
interface GradientOptions {
    canvas: HTMLCanvasElement | null;
    colors: string[];
    wireframe?: boolean;
    density?: [number, number];
    angle?: number;
    amplitude?: number;
    static?: boolean;
    loadedClass?: string;
}
export default class Gradient {
    _class: typeof Gradient;
    static defaultOptions: GradientOptions;
    vertexShader: string | null;
    uniforms: Record<string, Uniform>;
    time: number;
    mesh: Mesh | null;
    material: Material | null;
    geometry: PlaneGeometry | null;
    scrollingTimeout: number | undefined;
    scrollingRefreshDelay: number;
    width: number | null;
    minWidth: number;
    height: number;
    xSegCount: number | null;
    ySegCount: number | null;
    freqX: number;
    freqY: number;
    seed: number;
    freqDelta: number;
    activeColors: number[];
    private handle?;
    shaderFiles: {
        vertex: string;
        noise: string;
        blend: string;
        fragment: string;
    };
    options: GradientOptions;
    _flags: Record<string, any>;
    private _canvas;
    private _context;
    private _minigl;
    constructor(options: GradientOptions);
    getOption<T extends any>(name: keyof GradientOptions, defaultValue?: T | null | undefined): T;
    findCanvas(selector: string | HTMLCanvasElement): HTMLCanvasElement | null;
    setCanvas(canvas: HTMLCanvasElement): void;
    getCanvas(): HTMLCanvasElement;
    getContext(): WebGLRenderingContext | null;
    setFlag<T extends any>(name: string, value: T): T;
    getFlag<T extends any>(name: string, defaultValue?: T | undefined): T;
    handleScroll(): void;
    handleScrollEnd(): void;
    resize: () => void;
    animate: (event?: number) => void;
    pause(): void;
    play(): void;
    disconnect(): void;
    initMaterial(): Material;
    initMesh(): void;
    updateFrequency(e: number): void;
    toggleColor(index: number): void;
    init(): void;
    normalizeColor(hexCode: string): number[];
}
export {};
